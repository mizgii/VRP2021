# -*- coding: utf-8 -*-
"""p&d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1utwruIEJyUclf6G0iroZ72UbchlQZ7fR
"""

!pip install ortools

import numpy as np
import pickle
import matplotlib.pyplot as plt
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

"""# OR TOOLS"""

n=50 #num of clients
m=7 #maximum size of order
Q_max=10 #vehicle capacity
v_num=10 #num of vehicles

np.random.seed(0)

V=[i for i in range(n+1)] #clients with central point

x=np.random.rand(len(V))*100
y=np.random.rand(len(V))*100

Nc=V.copy()
Nc.remove(0)
deliv=[]
demands=[0 for _ in range(len(V))]
while len(Nc):
    mm=np.random.randint(1,m+1)
    a=Nc.pop(np.random.randint(0,len(Nc)))
    demands[V.index(a)]=mm
    b=Nc.pop(np.random.randint(0,len(Nc)))
    demands[V.index(b)]=mm*(-1)
    deliv.append([a,b])

d=[[np.hypot([x[i]-x[j]],[y[i]-y[j]])[0] for j in V] for i in V]

print(demands)
print(deliv)

def create_data_model():
    data = {}
    data['distance_matrix'] = d
    data['pickups_deliveries'] = deliv
    data['demands'] = demands
    data['vehicle_capacities'] = [Q_max for _ in range(v_num)]
    data['num_vehicles'] = v_num
    data['depot'] = 0
    return data

def get_routes(solution, routing, manager):
  """Get vehicle routes from a solution and store them in an array."""
  # Get vehicle routes and store them in a two dimensional array whose
  # i,j entry is the jth location visited by vehicle i along its route.
  routes = []
  for route_nbr in range(routing.vehicles()):
    index = routing.Start(route_nbr)
    route = [manager.IndexToNode(index)]
    while not routing.IsEnd(index):
      index = solution.Value(routing.NextVar(index))
      route.append(manager.IndexToNode(index))
    routes.append(route)
  return routes

def print_solution(data, manager, routing, solution):
    """Prints solution on console."""
    print(f'Objective: {solution.ObjectiveValue()}')
    total_distance = 0
    total_load = 0
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {}:\n'.format(vehicle_id)
        route_distance = 0
        route_load = 0
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            route_load += data['demands'][node_index]
            plan_output += ' {0} Load({1}) -> '.format(node_index, route_load)
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id)
        plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index),
                                                 route_load)
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        plan_output += 'Load of the route: {}\n'.format(route_load)
        print(plan_output)
        total_distance += route_distance
        total_load += route_load
    print('Total distance of all routes: {}m'.format(total_distance))
    print('Total load of all routes: {}'.format(total_load))

def main():
    """Entry point of the program."""
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                           data['num_vehicles'], data['depot'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)


    # Define cost of each arc.
    def distance_callback(from_index, to_index):
        """Returns the manhattan distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    def demand_callback(from_index):
        """Returns the demand of the node."""
        # Convert from routing variable Index to demands NodeIndex.
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(
        demand_callback)
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # null capacity slack
        data['vehicle_capacities'],  # vehicle maximum capacities
        True,  # start cumul to zero
        'Capacity')

    # Add Distance constraint.
    dimension_name = 'Distance'
    routing.AddDimension(
        transit_callback_index,
        0,  # no slack
        3000,  # vehicle maximum travel distance
        True,  # start cumul to zero
        dimension_name)
    distance_dimension = routing.GetDimensionOrDie(dimension_name)
    distance_dimension.SetGlobalSpanCostCoefficient(100)

    # Define Transportation Requests.
    for request in data['pickups_deliveries']:
        pickup_index = manager.NodeToIndex(request[0])
        delivery_index = manager.NodeToIndex(request[1])
        routing.AddPickupAndDelivery(pickup_index, delivery_index)
        routing.solver().Add(
            routing.VehicleVar(pickup_index) == routing.VehicleVar(
                delivery_index))
        routing.solver().Add(
            distance_dimension.CumulVar(pickup_index) <=
            distance_dimension.CumulVar(delivery_index))

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PARALLEL_CHEAPEST_INSERTION)

    #search_parameters.local_search_metaheuristic = (
     #   routing_enums_pb2.LocalSearchMetaheuristic.SIMULATED_ANNEALING)
    #search_parameters.time_limit.FromSeconds(300)
    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)

    # Print solution on console.
    if solution:
        print_solution(data, manager, routing, solution)

    routes = get_routes(solution, routing, manager)

    return routes

routes=main()

def random_color():
    return tuple(np.random.random() for _ in range(3))

plt.figure(figsize=(16, 12))
plt.scatter(x[1:],y[1:],c='y')
for i in V:
    #plt.annotate('q{}({})'.format(i, q[i]), (x[i],y[i]))
    plt.annotate('q{}'.format(i), (x[i],y[i]))
plt.scatter(x[0],y[0],c='r')

for route in routes:
    c = random_color()
    for ride in range(len(route)-1):
        i=route[ride]
        j=route[ride+1]
        plt.plot([x[i],x[j]],[y[i],y[j]], c=c)

plt.show()